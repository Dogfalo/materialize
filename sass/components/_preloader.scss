/*
  @license
  Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

/****************************/
/* STYLES FOR THE PRELOADER */
/****************************/

/*
 * Constants:
 *      ARCSIZE     = 270 degrees (amount of circle the arc takes up)
 *      ARCTIME     = 1333ms (time it takes to expand and contract arc)
 *      ARCSTARTROT = 216 degrees (how much the start location of the arc
 *                                should rotate each time, 216 gives us a
 *                                5 pointed star shape (it's 360/5 * 3).
 *                                For a 7 pointed star, we might do
 *                                360/7 * 3 = 154.286)
 *      SHRINK_TIME = 400ms
 */

.preloader-wrapper {
  display: inline-block;
  position: relative;
  width: 50px;
  height: 50px;
  
  /* The spinner does not have any contents that would have to be
   * flipped if the direction changes. Always use ltr so that the
   * style works out correctly in both cases. */
  direction: ltr;

  &.small {
    width: 36px;
    height: 36px;
  }

  &.big {
    width: 64px;
    height: 64px;
  }

  &.active {
    /* duration: 360 * ARCTIME / (ARCSTARTROT + (360-ARCSIZE)) */
    animation: container-rotate round(360deg * $spinner-arc-time / ($spinner-arc-start-rot + (360deg - $spinner-arc-size))) linear infinite;
  }

  &.cooldown {
    /* duration: SHRINK_TIME */
    animation: container-rotate round(360deg * $spinner-arc-time / ($spinner-arc-start-rot + (360deg - $spinner-arc-size))) linear infinite, fade-out $spinner-shrink-time cubic-bezier(0.4, 0.0, 0.2, 1);
  }
}

@keyframes container-rotate {
  to { transform: rotate(360deg) }
}

@keyframes fade-out {
  from { opacity: 1; }
  to   { opacity: 0; }
}

.spinner-layer {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0;
  white-space: nowrap;
  color: $spinner-default-color;
}

.spinner-blue,
.spinner-blue-only {
  color: #4285f4;
}

.spinner-red,
.spinner-red-only {
  color: #db4437;
}

.spinner-yellow,
.spinner-yellow-only {
  color: #f4b400;
}

.spinner-green,
.spinner-green-only {
  color: #0f9d58;
}

/**
 * IMPORTANT NOTE ABOUT CSS ANIMATION PROPERTIES (keanulee):
 *
 * iOS Safari (tested on iOS 8.1) does not handle animation-delay very well - it doesn't
 * guarantee that the animation will start _exactly_ after that value. So we avoid using
 * animation-delay and instead set custom keyframes for each color (as layer-2undant as it
 * seems).
 */
 .active .spinner-layer,
 .active .spinner-layer.spinner-blue-only,
 .active .spinner-layer.spinner-red-only,
 .active .spinner-layer.spinner-yellow-only,
 .active .spinner-layer.spinner-green-only {
   animation-name: fill-unfill-rotate;
   animation-duration: round(4 * $spinner-arc-time); /* durations: 4 * ARCTIME */
   animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
   animation-iteration-count: infinite;
   animation-fill-mode: both;
   opacity: 1;
 }

.active .spinner-layer.spinner-blue {
  animation-name: fill-unfill-rotate, blue-fade-in-out;
}

.active .spinner-layer.spinner-red {
  animation-name: fill-unfill-rotate, red-fade-in-out;
}

.active .spinner-layer.spinner-yellow {
  animation-name: fill-unfill-rotate, yellow-fade-in-out;
}

.active .spinner-layer.spinner-green {
  animation-name: fill-unfill-rotate, green-fade-in-out;
}

@keyframes fill-unfill-rotate {
  12.5% { transform: rotate(round($spinner-arc-size * 0.5)); } /* 0.5 * ARCSIZE */
  25%   { transform: rotate(round($spinner-arc-size * 1));   } /* 1 * ARCSIZE */
  37.5% { transform: rotate(round($spinner-arc-size * 1.5)); } /* 1.5 * ARCSIZE */
  50%   { transform: rotate(round($spinner-arc-size * 2));   } /* 2 * ARCSIZE */
  62.5% { transform: rotate(round($spinner-arc-size * 2.5)); } /* 2.5 * ARCSIZE */
  75%   { transform: rotate(round($spinner-arc-size * 3));   } /* 3 * ARCSIZE */
  87.5% { transform: rotate(round($spinner-arc-size * 3.5)); } /* 3.5 * ARCSIZE */
  to    { transform: rotate(round($spinner-arc-size * 4));   } /* 4 * ARCSIZE */
}

@keyframes blue-fade-in-out {
  0%   { opacity: 1; }
  25%  { opacity: 1; }
  26%  { opacity: 0; }
  89%  { opacity: 0; }
  90%  { opacity: 1; }
  100% { opacity: 1; }
}

@keyframes red-fade-in-out {
  0%   { opacity: 0; }
  15%  { opacity: 0; }
  25%  { opacity: 1; }
  50%  { opacity: 1; }
  51%  { opacity: 0; }
  100% { opacity: 0; }
}

@keyframes yellow-fade-in-out {
  0%   { opacity: 0; }
  40%  { opacity: 0; }
  50%  { opacity: 1; }
  75%  { opacity: 1; }
  76%  { opacity: 0; }
  100% { opacity: 0; }
}

@keyframes green-fade-in-out {
  0%   { opacity: 0; }
  65%  { opacity: 0; }
  75%  { opacity: 1; }
  90%  { opacity: 1; }
  100% { opacity: 0; }
}

.spinner-layer,
.circle-clipper {
  &::after {
    content: "";
    box-sizing: border-box;
    position: absolute;
    top: 0;
    border-width: $spinner-stroke-width;
    border-radius: 50%;

    .active & {
      /* duration: ARCTIME */
      animation-duration: $spinner-arc-time;
      animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
      animation-iteration-count: infinite;
      animation-fill-mode: both;
    }
  }
}

/**
 * Patch the gap that appear between the two adjacent div.circle-clipper while the
 * spinner is rotating (appears on Chrome 50, Safari 9.1.1, and Edge).
 */
.spinner-layer::after {
  left: 45%;
  width: 10%;
  border-top-style: solid;
}

.circle-clipper {
  display: inline-block;
  position: relative;
  width: 50%;
  height: 100%;
  overflow: hidden;

  &::after {
    bottom: 0;
    width: 200%;
    border-style: solid;
    border-bottom-color: transparent;
  }

  &.left::after {
    left: 0;
    border-right-color: transparent;
    transform: rotate(129deg);

    .active & {
      animation-name: left-spin;
    }
  }

  &.right::after {
    left: -100%;
    border-left-color: transparent;
    transform: rotate(-129deg);

    .active & {
      animation-name: right-spin;
    }
  }
}

@keyframes left-spin {
  from { transform: rotate(130deg); }
  50%  { transform: rotate(-5deg);  }
  to   { transform: rotate(130deg); }
}

@keyframes right-spin {
  from { transform: rotate(-130deg); }
  50%  { transform: rotate(5deg);    }
  to   { transform: rotate(-130deg); }
}
